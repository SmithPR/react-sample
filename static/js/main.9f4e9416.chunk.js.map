{"version":3,"sources":["services/userService.js","components/profile/ProfileView.js","components/profile/NoData.js","components/profile/Loading.js","components/profile/ModalForm.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["cachedUser","saveUserInner","user","fetch","method","then","userService","resp","Promise","reject","Error","dateOfBirth","Date","toString","firstName","length","lastName","phoneNumber","address","parse","console","error","ProfileView","_ref","toggleModal","react_default","a","createElement","Fragment","Segment","Group","style","paddingBottom","Header","size","Icon","name","Grid","columns","stackable","Column","concat","substring","age","height","Math","floor","degreeType","formatDegreeType","degreeField","degreeCompleted","Button","onClick","NoData","placeholder","icon","primary","Loading","Placeholder","fontSize","Line","ModalForm","modalOpen","saveUser","_useState5","useState","_useState6","Object","slicedToArray","fieldVals","setFieldVals","_useSaveCall","saveFn","onSuccess","_useState","_useState2","saving","setSaving","_useState3","_useState4","saveError","setSaveError","save","payload","catch","err","useSaveCall","onChangeHandler","event","target","objectSpread","defineProperty","value","Modal","open","onClose","closeOnEscape","closeOnDimmerClick","Content","scrolling","Form","id","onSubmit","Message","header","content","widths","Input","fluid","required","label","onChange","pattern","minLength","maxLength","type","inline","marginTop","commonjs","popupPosition","closable","startMode","dateFormat","Field","control","disabled","Checkbox","children","checked","Actions","form","loading","Profile","_useUser","setUser","setLoading","useEffect","finally","saveUserResult","useUser","setModalOpen","Container","text","as","dividing","profile_Loading","profile_ProfileView","profile_NoData","getContent","profile_ModalForm","App","className","Menu","fixed","inverted","Item","components_Profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f4e9416.chunk.js","sourcesContent":["let cachedUser;\n\n/**\n * getUser\n * Fetches a user from the nonexistent back-end\n * \n * @returns Promise which will be resolved with the user, or rejected if none found\n */\nconst getUser = function(){\n    if(cachedUser){\n        //Simulate a successful user fetch\n        return fetch('https://reqres.in/api/users/2').then(resp => {\n            return cachedUser;\n        });\n    }else{\n        //Simulate an unsuccessful user fetch\n        return fetch('https://reqres.in/api/users/23').then(resp=>{\n            return Promise.reject(new Error('User not found'));\n        });\n    }\n};\n\n/**\n * saveUser\n * Performs a web service call to save a user\n * \n * The user parameter has the following required properties:\n *  firstName       string\n *  lastName        string\n *  phoneNumber     string\n *  address         string\n *  dateOfBirth     Date or string\n * \n * User may also contain the following optional props:\n *  age             number\n *  height          number (inches)\n *  degreeType      string\n *  degreeField     string\n *  degreeCompleted boolean\n * \n * @param {*} user  object\n * \n * @returns Promise that will be resolved with\n *  the result of the web service call\n * @returns False if entry checks fail\n */\nconst saveUser = function(user){\n\n    //Handling for Date objects\n    if(user && user.dateOfBirth && user.dateOfBirth instanceof Date){\n        user.dateOfBirth = user.dateOfBirth.toString();\n    }\n\n    //Entry checks\n    if(!user ||\n        !user.firstName || typeof user.firstName !== 'string' || !user.firstName.length ||\n        !user.lastName || typeof user.lastName !== 'string' || !user.lastName.length ||\n        !user.phoneNumber || typeof user.phoneNumber !== 'string' || user.phoneNumber.length !== 10 ||\n        !user.address || typeof user.address !== 'string' || !user.address.length ||\n        !user.dateOfBirth || typeof user.dateOfBirth !== 'string' || !Date.parse(user.dateOfBirth)\n    ){\n        console.error('userService.saveUser called with an invalid user object');\n        return false;\n    }\n\n    return saveUserInner(user);\n};\n\n/**\n * saveUserInner\n * Performs a POST or PUT request based on whether or not the user has already been saved\n */\nconst saveUserInner = function(user){\n    const method = cachedUser ? 'POST': 'PUT';\n\n    return fetch('https://reqres.in/api/users', { method }).then(()=>{\n        cachedUser = user;\n    });\n}\n\nexport default {\n    getUser,\n    saveUser\n};","import React from 'react';\nimport { Header, Segment, Icon, Grid, Button } from \"semantic-ui-react\";\n\nconst formatDegreeType = degreeType => {\n    switch(degreeType){\n        case 'bs':\n            return 'Bachelor\\'s Degree';\n        case 'ms':\n            return 'Master\\'s Degree';\n        case 'phd':\n            return 'Doctorate';\n        case 'hs':\n        default:\n            return 'High School';\n    }\n};\n\nconst ProfileView = ({user, toggleModal}) => (\n    <React.Fragment>\n        <Segment.Group>\n            <Segment style={{paddingBottom: '2em'}}>\n\n                {/* name (header) */}\n                <Header size='medium'><Icon name=\"user\" /> {user.firstName} {user.lastName}</Header>\n                <Grid columns={2} stackable>\n\n                    {/* Address */}\n                    <Grid.Column>\n                        <b>Address:</b>&nbsp; {user.address}\n                    </Grid.Column>\n                    \n                    {/* Phone Number */}\n                    <Grid.Column>\n                        <b>Phone number:</b>&nbsp; {\n                            `(${user.phoneNumber.substring(0,3)})${user.phoneNumber.substring(3,6)}-${user.phoneNumber.substring(6)}`\n                        }\n                    </Grid.Column>\n                    \n                    {/* Age */}\n                    { user.age && \n                        <Grid.Column>\n                            <b>Age:</b>&nbsp; {user.age}\n                        </Grid.Column> \n                    }\n                    \n                    {/* Height */}\n                    { user.height && \n                        <Grid.Column>\n                            <b>Height:</b>&nbsp; {`${Math.floor(user.height/12)}'${user.height%12}\"`}\n                        </Grid.Column> \n                    }\n                    \n                    {/* Date of Birth */}\n                    <Grid.Column>\n                        <b>Date of Birth:</b>&nbsp; {user.dateOfBirth}\n                    </Grid.Column>\n\n                </Grid>\n            </Segment>\n            { user.degreeType && \n                <Segment style={{paddingBottom: '2em'}}>\n                    <Header size='medium'><Icon name=\"graduation cap\" />Education</Header>\n                    <p>\n                        <b>{formatDegreeType(user.degreeType)}</b>{ user.degreeField && ` in ${user.degreeField}`}\n                        <span>&nbsp; ({ user.degreeCompleted ? 'Completed': 'Incomplete' })</span>\n                    </p>\n                </Segment>\n            }\n        </Segment.Group>\n        <Button onClick={toggleModal}><Icon name=\"pencil\" />&nbsp;Edit</Button>\n    </React.Fragment>\n);\n\nexport default ProfileView;","import React from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\n\nconst NoData = ({ toggleModal }) => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='user outline' />\n                Hi!  You must be new here.\n            </Header>\n            <Button primary onClick={toggleModal}>Create Profile</Button>\n        </Segment>\n    );\n}\n\nexport default NoData;","import React from 'react';\nimport { Segment, Placeholder } from \"semantic-ui-react\";\n\nconst Loading = ()=>(\n    <Segment>\n        <Placeholder style={{fontSize: '3em'}}>\n            <Placeholder.Header />\n            <Placeholder.Line />\n            <Placeholder.Line />\n            <Placeholder.Line />\n        </Placeholder>\n    </Segment>\n);\n\nexport default Loading;","import React, { useState } from 'react';\nimport { Modal, Button, Form, Checkbox, Message } from \"semantic-ui-react\";\nimport { DateInput } from 'semantic-ui-calendar-react';\n\nconst useSaveCall = (saveFn, onSuccess) => {\n    const [saving, setSaving] = useState(false);\n    const [saveError, setSaveError] = useState(null);\n\n    const save = payload => {\n        setSaving(true);\n        saveFn(payload)\n            .then(()=>{\n                setSaving(false);\n                setSaveError(null);\n                onSuccess();\n            })\n            .catch(err=>{\n                setSaving(false);\n                setSaveError(err);\n            });\n    };\n\n    return { saving, saveError, save };\n};\n\nconst ModalForm = ({ modalOpen, toggleModal, user, saveUser }) => {\n\n    //Initialize form fields with current user data\n    const [fieldVals, setFieldVals] = useState(user || {\n        firstName: '', lastName: '', phoneNumber: '',\n        address: '', dateOfBirth: '', age: '',\n        height: '', degreeType: '', degreeField: '',\n        degreeCompleted: false\n    });\n\n    //Use hook to manage save/saving state\n    const { saving, saveError, save } = useSaveCall(saveUser, toggleModal);\n\n    //Generic input change handler\n    const onChangeHandler = (event, target) => {\n        target = target || event.target;\n        setFieldVals({ ...fieldVals, [target.name]: target.value });\n    };\n\n    //Checkbox change handler\n    const checkboxOnChangeHandler = (event, target) => {\n        setFieldVals({ ...fieldVals, [target.name]: target.checked });\n    };\n\n    return (\n        <Modal open={modalOpen} onClose={toggleModal} closeOnEscape={false} \n            closeOnDimmerClick={false} >\n\n            <Modal.Header>{user ? 'Update Profile' : 'Create Profile'}</Modal.Header>\n            <Modal.Content scrolling>\n                <Form id=\"modalForm\" onSubmit={()=>save(fieldVals)} error={!!saveError}>\n                    \n                    { saveError &&\n                        <Message error header=\"Oops!\" content={saveError}></Message>\n                    }\n\n                    <Form.Group widths=\"equal\">\n\n                        {/* First Name */}\n                        <Form.Input fluid required label=\"First name\" placeholder=\"First name\" \n                            name=\"firstName\" onChange={onChangeHandler} value={fieldVals.firstName}\n                            pattern=\"[A-Za-z]+\" />\n\n                        {/* Last Name */}\n                        <Form.Input fluid required label=\"Last name\" placeholder=\"Last name\"\n                            name=\"lastName\" onChange={onChangeHandler} value={fieldVals.lastName}\n                            pattern=\"[A-Za-z]+\" />\n                    </Form.Group>\n\n                    <Form.Group widths=\"equal\">\n                        \n                        {/* Phone Number */}\n                        <Form.Input fluid required label=\"Phone number\" placeholder=\"10-digit Phone number\"\n                            name=\"phoneNumber\" onChange={onChangeHandler} value={fieldVals.phoneNumber}\n                            pattern=\"[0-9]+\" minLength=\"10\" maxLength=\"10\" type=\"tel\" />\n                            \n                        {/* Address */}\n                        <Form.Input fluid required label=\"Address\" placeholder=\"Address\" \n                            name=\"address\" onChange={onChangeHandler} value={fieldVals.address}/>\n                    </Form.Group>\n\n                    <Form.Group inline style={{marginTop: '3em'}}>\n                        \n                        {/* Date of birth */}\n                        <DateInput label=\"Date of birth\" required popupPosition=\"right center\"\n                            name=\"dateOfBirth\" onChange={onChangeHandler} value={fieldVals.dateOfBirth || ''}\n                            placeholder=\"Date of birth\" closable startMode=\"year\" dateFormat=\"MMMM D, YYYY\"/>\n\n                        {/* Age */}\n                        <Form.Input type=\"number\" label=\"Age\" placeholder=\"Age\"\n                            name=\"age\" onChange={onChangeHandler} value={fieldVals.age} />\n\n                        {/* Height */}\n                        <Form.Input type=\"number\" label=\"Height\" placeholder=\"Height (in.)\"\n                            name=\"height\" onChange={onChangeHandler} value={fieldVals.height} />\n                    </Form.Group>\n                    \n                    {/* Education */}\n                    <Form.Group inline style={{marginTop: '3em'}}>\n                        <Form.Field label=\"Highest level of Education\" control=\"select\"\n                            name=\"degreeType\" onChange={onChangeHandler} value={fieldVals.degreeType}>\n                            <option value=\"\"></option>\n                            <option value=\"hs\">High School</option>\n                            <option value=\"bs\">Bachelor's Degree</option>\n                            <option value=\"ms\">Master's Degree</option>\n                            <option value=\"phd\">Doctorate</option>\n                        </Form.Field>\n                        <Form.Input label=\"Specialization\" placeholder=\"Specialization\"\n                            disabled={!fieldVals.degreeType || fieldVals.degreeType==='hs'}\n                            name=\"degreeField\" onChange={onChangeHandler} value={fieldVals.degreeField}/>\n                        <Form.Field control={Checkbox} label={{ children: 'Diploma Received'}} \n                            name=\"degreeCompleted\" onChange={checkboxOnChangeHandler} checked={fieldVals.degreeCompleted}/>\n                    </Form.Group>\n                    \n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button primary type=\"submit\" form=\"modalForm\" loading={saving}>Save</Button>\n                <Button onClick={toggleModal}>Cancel</Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default ModalForm;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Header } from \"semantic-ui-react\";\n\nimport userService from '../services/userService.js';\nimport ProfileView from './profile/ProfileView.js';\nimport NoData from './profile/NoData.js';\nimport Loading from './profile/Loading.js';\nimport ModalForm from './profile/ModalForm.js';\n\nconst useUser = function(){\n    const [user, setUser] = useState();\n    const [loading, setLoading] = useState(true);\n\n    //Initial user fetch\n    //Second argument is needed to prevent this from running during every render\n    useEffect(()=>{\n        userService.getUser()\n            .then( setUser )\n            .finally( ()=>setLoading(false) );\n    }, []);\n\n    //Save user function\n    const saveUser = function(user){\n        const saveUserResult = userService.saveUser(user);\n\n        if(saveUserResult){\n            //Save is in progress\n            return saveUserResult\n                .then( ()=>setUser(user) );\n        }else{\n            //Call failed entry checks\n            return Promise.reject('The form is invalid.  Please check all fields and try again.');\n        }\n    }\n\n    return { user, saveUser, loading };\n};\n\nconst getContent = function({user, loading, toggleModal}){\n    if(loading){\n        //Show loading state\n        return (\n            <Loading />\n        );\n    }else if(!user){\n        //Show no-data state\n        return (\n            <NoData toggleModal={toggleModal} />\n        );\n    }else{\n        //Show user profile\n        return (\n            <ProfileView user={user} toggleModal={toggleModal} />\n        );\n    }\n};\n\nconst Profile = () => {\n    const { user, saveUser, loading } = useUser();\n    const [ modalOpen, setModalOpen ] = useState(false);\n    \n    const toggleModal = () => setModalOpen(!modalOpen);\n\n    return (\n        <React.Fragment>\n\n            {/* Page header */}\n            <Container text style={{ marginTop: '7em' }}>\n                <Header as=\"h1\" dividing>\n                Your Profile\n                </Header>\n                <p>View and edit your personal information.</p>\n            </Container>\n            \n            {/* Page content */}\n            <Container text style={{ marginTop: '2em' }}>\n                { getContent({ user, loading, toggleModal }) }\n            </Container>\n\n            {/* Editor Modal */}\n            <ModalForm user={user} saveUser={saveUser} modalOpen={modalOpen} toggleModal={toggleModal} />\n\n        </React.Fragment>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport './App.css';\n\nimport { Menu, Container } from \"semantic-ui-react\";\n\nimport Profile from './components/Profile.js';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Menu fixed=\"top\" inverted>\n                <Container>\n                    <Menu.Item as='a' header>\n                        React Sample\n                    </Menu.Item>\n                </Container>\n            </Menu>\n    \n            <Profile />\n\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}